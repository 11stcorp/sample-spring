def THIS_NAME = "sample-spring"
def REPOSITORY_URL = "http://bitbucket.11stcorp.com/scm/cloud/sample-spring.git"
def REPOSITORY_SECRET = "git-common-user"

def CODE_BUILD_PROJECT_NAME = "sample-spring"
def TAG_NAME = "release"
// def CODE_BUILD_ENV = "[ { TAG_NAME, ${TAG_NAME} }, {BRANCH_NAME, ${BRANCH_NAME} ]"
// def THIS_VERSION = "latest"
// def CODE_BUILD_ENV = "[ { TAG_NAME, ${TAG_NAME} }, { VERSION, ${THIS_VERSION}]"

@Library("github.com/11stcorp/groovy-modules@main")
def butler = new com.iist.devops.v1.butler()
def label = "worker-${UUID.randomUUID().toString()}"

properties([
    buildDiscarder(logRotator(daysToKeepStr: "60", numToKeepStr: "30"))
])
podTemplate(label: label, containers: [
    containerTemplate(name: "builder", image: "446804614856.dkr.ecr.ap-northeast-2.amazonaws.com/street-builder:latest", command: "cat", ttyEnabled: true, alwaysPullImage: true, resourceRequestCpu: '500m'),
//   containerTemplate(name: "maven", image: "maven:3.5.4-jdk-8-alpine", command: "cat", ttyEnabled: true, resourceRequestCpu: '500m')
], volumes: [
    hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock"),
//  hostPathVolume(mountPath: "/home/jenkins/.helm", hostPath: "/home/jenkins/.helm")
]) {
    node(label) {
        stage("Prepare") {
            container("builder") {
                butler.prepare(THIS_NAME)
            }
        }
        stage("Checkout") {
            container("builder") {
                try {
                    if (REPOSITORY_SECRET) {
                        git(url: REPOSITORY_URL, branch: BRANCH_NAME, credentialsId: REPOSITORY_SECRET)
                    } else {
                        git(url: REPOSITORY_URL, branch: BRANCH_NAME)
                    }
                } catch (e) {
                    throw e
                }
            }
        }
        stage("Build") {
            container("builder") {
                butler.aws_codebuild(CODE_BUILD_PROJECT_NAME, "[ { TAG_NAME, ${TAG_NAME} }, {BRANCH_NAME, env.BRANCH_NAME ]")
            }
        }
    }
}